# -*- coding: utf-8 -*-
"""ManavPatel_COMP262_assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1awOzT7_s_pM4gmtWY3_iaT5SIm70rCCA
"""

import json 
import numpy as np 
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding, GlobalAveragePooling1D
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.preprocessing import LabelEncoder

import json

# read the json file
with open('manavPatel_intents.json') as file:
    data = json.load(file)
    


# create empty lists
patterns = []
patterns_tags = []
tags = []
responses = []

for intent in data['intents']:
    for pattern in intent['patterns']:
        patterns.append(pattern)
        patterns_tags.append(intent['tag'])
    responses.append(intent['responses'])

    if intent['tag'] not in tags:
        tags.append(intent['tag']) 
        
num_classes = len(tags)

print("Tags:")
for tag in tags:
    print(tag)
print("")

print("Patterns:")
for pattern in patterns:
    print(pattern)
print("")

print("Responses:")
for response in responses:
    print(response)
print("")

print("patterns_tags:")
for pattern_tag in patterns_tags:
    print(pattern_tag)
print("")

# Encode the intents
encoder = LabelEncoder()
encoder.fit([intent['tag'] for intent in data['intents']])

encoder = LabelEncoder()
encoder.fit(patterns_tags)
patterns_tags = encoder.transform(patterns_tags)

print('patterns tags after encoding',patterns_tags)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, Dense, GlobalAveragePooling1D
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.preprocessing import LabelEncoder
import numpy as np

vocab_size = 1100
embedding_dim = 20
max_len = 35
oov_token = "<OOV>"

tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_token)
tokenizer.fit_on_texts(patterns)
word_index = tokenizer.word_index
sequences = tokenizer.texts_to_sequences(patterns)
padded_sequences = pad_sequences(sequences, truncating='post', maxlen=max_len)

model = Sequential()
model.add(Embedding(vocab_size, embedding_dim, input_length=max_len))
model.add(GlobalAveragePooling1D())
model.add(Dense(16, activation='relu'))
model.add(Dense(10, activation='sigmoid'))
model.add(Dense(num_classes, activation='softmax'))

model.compile(loss='sparse_categorical_crossentropy', 
              optimizer='adam', metrics=['accuracy'])

model.summary()

epochs = 500
history_500 = model.fit(padded_sequences, np.array(patterns_tags), epochs=epochs)

history_1000 = model.fit(padded_sequences, np.array(patterns_tags), epochs=1000)

import pickle

# Save the tokenizer
with open('tokenizer.pickle', 'wb') as handle:
    pickle.dump(tokenizer, handle, protocol=pickle.HIGHEST_PROTOCOL)

# Save the encoder
with open('encoder.pickle', 'wb') as handle:
    pickle.dump(encoder, handle, protocol=pickle.HIGHEST_PROTOCOL)

# Save the model
model.save('model.h5')

import colorama 
colorama.init()
from colorama import Fore, Style, Back
import json
import pickle
import random
import numpy as np
import tensorflow as tf
from tensorflow import keras

# Load intents file
with open("manavPatel_intents.json") as file:
    data = json.load(file)

# Load trained model
model = keras.models.load_model('model.h5')

# Load tokenizer object
with open('tokenizer.pickle', 'rb') as handle:
    tokenizer = pickle.load(handle)

# Load label encoder object
with open('encoder.pickle', 'rb') as enc:
    encoder = pickle.load(enc)

# Parameters
max_len = 35
    
def chat():
    while True:
        print(Fore.LIGHTBLUE_EX + "User: " + Style.RESET_ALL, end="")
        inp = input()
        if inp.lower() == "quit":
            break

        # Tokenize the input
        sequence = tokenizer.texts_to_sequences([inp])
        padded_sequence = keras.preprocessing.sequence.pad_sequences(sequence, maxlen=max_len, truncating='post')

        # Predict the class of the input
        result = model.predict(padded_sequence)
        tag = encoder.inverse_transform([np.argmax(result)])

        # Print the response
        for intent in data["intents"]:
            if intent["tag"] == tag:
                response = random.choice(intent["responses"])
                print(Fore.GREEN + "ChatBot: " + Style.RESET_ALL + response)

# Start the chatbot
print(Fore.YELLOW + "Start messaging with the bot (type quit to stop)!" + Style.RESET_ALL)
chat()







